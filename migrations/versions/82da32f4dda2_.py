"""empty message

Revision ID: 82da32f4dda2
Revises: b947d6827dfa
Create Date: 2025-06-14 18:23:51.307584

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '82da32f4dda2'
down_revision = 'b947d6827dfa'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_group'))
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user')),
    sa.UniqueConstraint('email', name=op.f('uq_user_email'))
    )
    op.create_table('debt',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('borrower_id', sa.Integer(), nullable=False),
    sa.Column('lender_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['borrower_id'], ['user.id'], name=op.f('fk_debt_borrower_id_user')),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], name=op.f('fk_debt_group_id_group')),
    sa.ForeignKeyConstraint(['lender_id'], ['user.id'], name=op.f('fk_debt_lender_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_debt')),
    sa.UniqueConstraint('lender_id', 'borrower_id', 'group_id', name=op.f('uq_debt_lender_id'))
    )
    op.create_table('expense',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('category', sa.Enum('ACCOMMODATION', 'DRINKS', 'ENTERTAINMENT', 'FOOD', 'GAS', 'GROCERIES', 'OTHER', 'TICKETS', 'UTILITIES', name='expensecategory'), nullable=True),
    sa.Column('payers_split', sa.Enum('AMOUNT', 'EQUALLY', 'PERCENTAGE', name='splittype'), nullable=False),
    sa.Column('owers_split', sa.Enum('AMOUNT', 'EQUALLY', 'PERCENTAGE', name='splittype'), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=True),
    sa.Column('creator_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updater_id', sa.Integer(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['creator_id'], ['user.id'], name=op.f('fk_expense_creator_id_user')),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], name=op.f('fk_expense_group_id_group')),
    sa.ForeignKeyConstraint(['updater_id'], ['user.id'], name=op.f('fk_expense_updater_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_expense'))
    )
    op.create_table('friends',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('friend_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['friend_id'], ['user.id'], name=op.f('fk_friends_friend_id_user')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_friends_user_id_user')),
    sa.PrimaryKeyConstraint('user_id', 'friend_id', name=op.f('pk_friends'))
    )
    op.create_table('group_members',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], name=op.f('fk_group_members_group_id_group')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_group_members_user_id_user')),
    sa.PrimaryKeyConstraint('user_id', 'group_id', name=op.f('pk_group_members'))
    )
    op.create_table('balance',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('expense_id', sa.Integer(), nullable=False),
    sa.Column('owed', sa.Float(), nullable=False),
    sa.Column('payed', sa.Float(), nullable=False),
    sa.Column('total', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['expense_id'], ['expense.id'], name=op.f('fk_balance_expense_id_expense')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_balance_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_balance')),
    sa.UniqueConstraint('user_id', 'expense_id', name=op.f('uq_balance_user_id'))
    )
    op.create_table('expense_users',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('expense_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['expense_id'], ['expense.id'], name=op.f('fk_expense_users_expense_id_expense')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_expense_users_user_id_user')),
    sa.PrimaryKeyConstraint('user_id', 'expense_id', name=op.f('pk_expense_users'))
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('expense_users')
    op.drop_table('balance')
    op.drop_table('group_members')
    op.drop_table('friends')
    op.drop_table('expense')
    op.drop_table('debt')
    op.drop_table('user')
    op.drop_table('group')
    # ### end Alembic commands ###
